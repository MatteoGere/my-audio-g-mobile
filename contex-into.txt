ðŸ“‹ CONTEXT INTRO - Audio Guide PWA Development
Project Overview
You are developing a Progressive Web App (PWA) for tourist audio guides. The app is mobile-first and allows tourists to discover destinations through interactive audio tours with integrated maps.
Current Setup & Architecture
Existing Base:

âœ… Framework: Next.js 15+ with App Router
âœ… Components: Atomic components already created and styled
âœ… Types: Complete Supabase type definitions
âœ… Styling: Design system implemented

Complete Tech Stack:

Frontend: Next.js 15, TypeScript, Tailwind CSS
State Management: Redux Toolkit + RTK Query (to implement)
Backend: Supabase (Database, Auth, Storage with signed URLs)

Database Schema Context
Key Tables (User READ-ONLY except where noted):

audio_itinerary: Tours with company, duration, description
audio_track: Individual audio files with order and storage keys
audio_track_poi: Geographic coordinates for each track
user_profile: User data (READ/WRITE)
user_favourite: User favorites (READ/WRITE) - types: FAVOURITE-TRACK | FAVOURITE-ITINERARY
audio_qr_token: QR code access tokens
image_file: Image metadata with storage keys

Critical Technical Requirements:

All media files use signed URLs (audio_storage_key, image_storage_key)
Signed URLs must be cached locally with expiration tracking
Geographic discovery via fn_nearby_audio_itineraries() function

Core User Journey & Features
User Experience Flow:

Onboarding: Language selection, permissions, tutorial
Discovery: Search, nearby tours via GPS, QR scanning
Consumption: Audio playback with map integration
Personalization: Favorites, preferences, offline downloads

Key Features:

Audio Player with background playback, Media Session API
Interactive Maps with POI markers and GPS tracking
Offline Mode with selective downloads
User Profiles with favorites and preferences
QR Code scanning for quick access

Mobile-First Design Principles
Navigation & UX:

Bottom tabs for primary actions (Home, Search, Favorites, Profile)
Touch-first gestures, tap targets â‰¥44px
Offline-first functionality for core features
Progressive loading with intelligent caching

Performance Requirements:

Lazy loading for images and audio
Signed URL caching (50min cache for 60min URLs)
Service Worker for offline content
Memory management for audio playback

Development Constraints
PWA Requirements:

Installable with proper manifest
Offline functionality for downloaded content
Responsive design with mobile-first approach

Technical Constraints:

Audio: Background playback, playlist management
Location: GPS optimization, geofencing
Storage: Intelligent device storage management
Network: Optimization for slow/unstable connections
Security: Supabase RLS policies, input validation

AI Development Guidelines
When working on tasks, always:
ðŸŽ¯ User Experience First

Prioritize mobile experience, adapt for desktop
Consider offline scenarios - what happens without network?
Implement robust loading states and error handling
Focus on touch-friendly interactions

ðŸ’¾ Data & Performance

Use existing TypeScript types from Supabase schema
Implement signed URL caching with expiration logic
Follow atomic design - reuse existing components
Optimize for performance: lazy loading, memoization, bundle optimization

ðŸ”§ Technical Standards

TypeScript strict mode - leverage existing type definitions
Redux Toolkit patterns for state management
RTK Query for API calls with proper caching
Service Worker for offline functionality

â™¿ Accessibility & UX

Semantic HTML with proper ARIA labels
Keyboard navigation support
Screen reader compatibility
High contrast and font scaling support